---
layout: post
title:  Java 기초 - 접근제한자와 객체배열관리
date:   2023-07-20 19:31:29 +0900
categories: Java
---
 Garbage Collection이 자동으로 관리하는 JVM의 메모리 구조는 다음 3가지로 구분된다.

-   클래스 영역 (메소드 영역) : 클래스의 정보를 저장하는 영역
-   힙 (Heap) : 인스턴스가 생성되는 공간
-   스택 (Stack) : 메서드 수행시 프레임이 할당되어, 필요한 변수와 중간 결과값을 임시로 기억하는 곳으로, 메서드 종료 시에 할당된 메모리가 자동으로 제거됨

### static

 static이라는 제한자가 붙어있는 객체는 클래스와 같은 시점에 로딩되어 클래스당 하나의 메모리 공간만 할당된다. non-static은 인스턴스 생성 시 로딩되어 인스턴스당 메모리가 별도로 할당되는 것과 차이가 있다.  

 따라서 Person이라는 클래스의 static 영역은 Person.name처럼 클래스 이름으로 접근해야 한다. 그리고 non-static 영역은 미리 메모리에 올려진 static 영역에 직접 접근할 수 있지만 반대의 경우는 불가능하다.

### 패키지

PC의 파일을 관리하기 위해 폴더를 사용하는 것처럼, 클래스는 패키지를 이용하여 관리한다. 다른 패키지에 있는 클래스를 사용하기 위해서는 import 과정이 필요하다.

### 접근 제한자

캡슐화는 객체의 필드과 메서드를 하나로 묶고, 실제 구현 내용의 일부를 외부에 감추어 은닉한 것을 말한다. 접근 제한자 키워드를 이용하여 접근 허용 범위를 지정할 수 있다.

-   public : 모든 위치에서 접근 가능
-   protected : 같은 패키지에서, 또는 다른 패키지의 클래스와 상속관계가 있는 경우에 접근 가능
-   default : 같은 패키지에서만 접근이 허용
-   private : 자신 클래스 내부에서만 접근이 허용

클래스에서 접근 제한에 의해 접근할 수 없게 선언된 변수의 경우, 외부에서 접근하기 위한 메서드인 setter와 getter를 따로 public으로 선언하여 사용할 수 있다.

```javascript
public class Person {
	// 필드 접근 제한
    private String name;
    private int age;
    
    // 외부에서 .setName("이름")으로 인스턴스의 name값 지정 가능
    public String setName(String name){
    	this.name = name;
    }
    
    // 외부에서 .getName()으로 인스턴스가 가진 name값 호출 가능
    public String getName(){
    	return name;
    }
}
```

### 싱글턴 패턴

위에서 설명한 내용을 이용하여, 소프트웨어 디자인 패턴에서 Singleton pattern을 따르는 클래스를 만들 수 있다. 이런 클래스는 생성자가 여러 번 호출되더라도 실제 생성되는 객체는 하나이고, 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴한다. 이를 통해 정보 관리의 일원화를 실현할 수 있다.

```javascript
public class Manager {
	
    // static 키워드를 통해, 생성자로 생성된 인스턴스인 manager를 미리 메모리에 올림
    private static Manager manager = new Manager();
    
    // private 접근제한자로, 외부에서 인스턴스 생성이 불가하게 만듦 
    private Manager() {}
    
    //  미리 만들어진 인스턴스에 getter 메서드로 접근하게 되어, 결국 객체 하나만 이용하게 됨
    public static Manager getManager() {
    	return manager;
    }
}
```