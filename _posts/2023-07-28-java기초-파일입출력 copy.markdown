---
layout: post
title:  Java 기초 - 파일입출력
date:   2023-07-28 19:31:29 +0900
categories: Java
---
### Stream

 I/O는 데이터의 입력과 출력, 그러니까 컴퓨터 내부 혹은 외부의 장치와 데이터를 주고 받는 행위를 말한다. File은 가장 기본적인 입출력 장치 중 하나로, 파일과 디렉터리를 다루는 클래스이다. Stream은 데이터를 운반하는 데에 사용되는 통로이다. 물의 흐름처럼 단방향으로만 통신이 가능하다. 하나의 스트림으로 입력과 출력을 같이 처리가 불가능하다는 뜻이다. 이 Stream은 Byte Stream과 Character Stream으로 나뉜다. 바이트스트림은 바이트 단위로 입출력이 오가는데, 주로 이진데이터를 읽고 쓰기 위해 사용된다. 문자 스트림은 문자 단위로 입출력이 일어난다.

```javascript
// 바이트 입출력
try (FileInputStream fis = new FileInputStream("사진.jpg");  // 입력할 파일
        FileOutputStream fos = new FileOutputStream("사진-복사본.jpg");) { // 출력할 파일

    //배열 준비
    byte[] buffer = new byte[10];  // 바이트를 담을 버퍼 크기는 10
    int b; // 버퍼에 담긴 바이트 수

    // 스트림을 순차적으로 읽어오는데, buffer에 퍼 와라
    while ((b = fis.read(buffer)) != -1) { // buffer에 담긴 바이트 개수는 b에 저장되는데, 없으면 -1 반환해서 종료됨 
        fos.write(buffer, 0, b);  // 0부터 b길이만큼 buffer배열에 있는 바이트를 fos에 기록해라

} catch (IOException e) {
    e.printStackTrace();
}

// 문자 입출력
try (FileReader reader = new FileReader("input.txt");
        FileWriter writer = new FileWriter("input_copy.txt")) {

    // char[] buffer =new char[10];
    int c; 
    while((c= reader.read()) != -1) {  // 버퍼가 없으면 하나씩 읽어와서 속도가 느리다
        writer.write(c);
    }
}


System.out.println("try()안의 스트림은 알아서 닫혔습니다.");
```

### Auxiliary Stream

 보조스트림은 스트림의 기능을 보완하기 위해 사용되는데, 실제 데이터를 주고 받는 스트림이 아니므로 보조 스트림만으로는 입출력이 불가능하다. 그래서 스트림 생성 후 보조 스트림을 생성해야 하는데, 여러 보조 스트림을 연결하여 사용하는 것도 가능하다. 보조 스트림의 close()를 호출하면 노드 스트림의 close()까지 호출된다.

```javascript
// 보조 스트림을 사용해보자
try (BufferedReader reader = new BufferedReader(new FileReader("big_input.txt"));
        BufferedWriter writer = new BufferedWriter(new FileWriter("big_input-copy3.txt"))) {

    // buffered reader & writer는 character를 하나씩 읽어오는 게 아니다
    String line; 
    while ((line = reader.readLine()) != null) { // line 단위로 읽어오자
        writer.write(line);  // 담아온 라인을 기록하고
        writer.newLine();  // 줄 넘김
    }
}
```

### Serialization 

 직렬화란, 객체가 가진 데이터를 순차적인 형태인 데이터 스트림로 변환하는 절차이다. 반대의 경우는 역직렬화(Deserialization)라고 한다. 직렬화 가능한 클래스는 Serialization 인터페이스를 구현하면 되는데, 해당 인터페이스를 구현한 클래스를 상속받았다면 구현하지 않아도 된다. 만약 자손에만 구현했다면 조상클래스의 인스턴스 변수는 직렬화 대상에서 제외된다. transient 키워드를 사용하면 직렬화 대상에서 제외시킬 수 있다. 

### serialVersionUID

직렬화된 객체를 역직렬화할 때는 직렬화했을 때와 같은 클래스를 사용해야 한다. 따라서 해당 UID를 활용하여 클래스의 변경여부를 파악한다. 작성하지 않으면 컴파일러가 자동으로 생성하나, 멤버 변경 시에 자동으로 수정되므로 동일한 클래스인지 알 수 없어지게 되므로 작성하는 것이 권장된다. 

```javascript
public class Person implements Serializable {  // 객체를 직렬화하려면 인터페이스를 구현하자
    // ID를 등록해놓으면 클래스가 성형수술해도 알아볼 수 있다.
    private static final long serialVersionUID = 1L;  

    String name;
    String pNum;

    public Person() {
    }

    public Person(String name, String pNum) {
        this.name = name;
        this.pNum = pNum;
    }
}

// 객체를 입출력하기 위해선 직렬화 처리를 위한 보조 스트림을 사용한다
public class PersonListTest {  
    public static void main(String[] args) {
        // 바이트 기반 스트림에서 객체를 읽어오자
        try(ObjectInputStream ois = new ObjectInputStream(new FileInputStream("person.dat")) ){
            // 객체를 읽을 때는 readObject()를 쓰자
            Object obj = ois.readObject(); 
            System.out.println(obj);

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }

        /* 쓰는 경우는 이렇게
        try(ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("personList.dat"))){
            oos.writeObject(list); */
        }
    }
}
```