---
layout: post
title:  Java 기초 - 클래스와 객체
date:   2023-07-19 19:31:29 +0900
categories: Java
---
### 객체지향 프로그래밍

사물같은 유형적인, 또는 개념이나 논리같은 무형적인 현실세계의 객체를 SW의 객체로 설계하는 프로그램 설계방법론의 일종이다. 이를 위해 객체를 만드는 설계도인 클래스, 그리고 그 클래스를 통해 생성된 객체인 인스턴스를 활용한다. 객체지향 프로그래밍의 특징으로는 추상화, 다형성, 상속, 캡슐화가 있고, 장점으로는 모듈화된 프로그래밍이 가능하고 재사용성이 높다.

### 클래스

관련 있는 변수와 함수를 묶어서 만든 사용자정의 자료형이다. 각 객체들이 어떤 속성과 동작을 가지는지 결정하고, 객체들 사이에서 메시지를 주고 받도록 만들어 준다.

클래스는 속성을 담당하는 필드, 동작을 담당하는 메소드, 그리고 생성자와 중첩 클래스(클래스 내부의 다른 클래스)로 구성된다.

```javascript
public class Person {  // 클래스
	
    // 속성값을 정의하는 필드
    String name;
    int age;
   
   // 기능을 정의하는 메서드
   public void eat(){
   }
   
   // 생성자
   public Person(){
   }
```

### 변수

클래스 변수는 static이라는 키워드를 통해 클래스 영역에 선언되는데, 클래스가 메모리에 올라갈 때 생성되므로 모든 인스턴스가 공유한다.

인스턴스 변수는 인스턴스가 new 선언으로 생성되었을 때 각각의 인스턴스별로 생성된다. int\[\] arr = new int\[3\];라고 선언해야 길이가 3인 배열이 생성되는 것처럼 이해하면 된다.

지역변수는 메서드, 생성자처럼 클래스 영역 이외에 존재하는 변수이다. 이 역시 선언되었을 때 생성된다.

### 메소드

메소드는 객체가 할 수 있는 행동을 정의한다. 어떤 작업을 수행하는 명령문의 집합에 이름을 붙인 것이다. 메소드 이름은 소문자로 시작하는 것이 관례이다. 선언 시에 { } 안에 해야 할 일들을 정의하고, \`클래스객체.메소드이름\` 으로 호출한다.

```javascript
public class Person {  // 클래스 생성

    public void study(int time){  // 매개변수 time을 이용하여 기능 작동 
    	System.out.println(time + "시간 공부했다.");
    
    // 메소드 선언 시 void로 리턴 타입을 지정하여 return값이 없으나,
    // 타입을 작성했다면 반드시 해당 타입의 값 하나만 리턴해야 함
	}
    
    // 오버로딩을 이용하여 이름과 리턴타입이 같고 매개변수가 다른 메소드를 정의할 수 있음
    public void study(int time, String str){
	System.out.println(time + "시간" + str + "했다.");
	}
}

Person p = new Person();  // Person 클래스의 인스턴스 p 생성
p.study(10);  // 10을 인자로 전달하여 "10시간 공부했다."를 출력

p.study(2, "게임");  // "2시간 게임했다."를 출력
```

### 생성자

new 키워드와 함께 호출하여 객체를 생성한다. 클래스명과 동일하고, 결과형 리턴값을 갖지 않는다. 객체가 생성될 때 반드시 하나의 생성자가 호출되는데, 하나의 클래스 내부에 생성자가 하나도 없으면 자동적으로 default 생성자가 있는 것으로 보면 된다. 매개변수나 자료형이 다른 여러 개의 생성자가 오버로딩되어 존재할 수 있다. 멤버필드의 초기화에 주로 사용된다.

```javascript
class Dog {
    String name;
    int age;

    Dog() {}  // 기본생성자
    
    // 생성자 오버로딩
    Dog(String name) {}
    Dog(String n, int a) {
    // this를 이용하여 자신의 멤버 접근 가능
    this.name = n;
    this.age = a;
    }
    // this는 참조변수로써 객체 자신을 가리킴
    // 이름이 동일한 지역변수와 구분하여 필드임을 식별하게 함
    // 객체에 대한 참조이므로 static 영역에서 사용 불가
    
   this("멍멍이", 4)  // Dog("멍멍이", 4)
}
```