---
layout: post
title:  Java 기초 - 컬렉션
date:   2023-07-26 19:31:29 +0900
categories: Java
---
### 컬렉션 프레임워크

자바의 인터페이스를 사용하여 구현되어, 다수의 데이터를 쉽고 효과적으로 처리할 수 있는 표준화된 방법을 제공하는 클래스의 집합이다. 컬렉션 프레임워크는 데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현되어 있다. 동일한 타입끼리 관리하는 자료구조인 컬렉션을 기반으로 객체들을 한 곳에 모아놓고 편리하게 사용할 수 있는 환경을 제공한다. 

-   정적 자료구조 : 고정된 크기의 자료구조로, 선언 시 크기를 명시하면 바꿀수 없다. 배열이 대표적
-   동적 자료구조 : 요소의 개수에 따라 자료구조의 크기a가 동적으로 증감한다. 리스트, 스택, 큐 등이 있다.

리스트는 순서가 있고, 중복을 허용한다는 점에서 배열과 유사하다. 구현 클래스로는 ArrayList, LinkedList, Vector 등이 있다. 내부적으로 배열을 이용하여 데이터를 관리하나, 배열과 다르게 크기가 유동적으로 변한다. 

-   ArrayList : 같은 타입의 데이터를 묶어 사용하고 접근 속도가 빠르며 크기를 변경할 수 없어 데이터를 옮겨야 하는 Array를 활용하여 비슷한 특성을 공유한다. 
-   LinkedList : 각 요소를 Node로 정의하고, Node는 다음 요소의 참조값과 데이터로 구성된다. 각 요소가 다음 요소의 링크 정보를 가져 연속적으로 구성될 필요가 없다.

-   Set : 순서가 없고 중복을 허용하지 않는다. 효율적으로 중복 데이터를 제거하는 수단이고 속도가 빠르지만 단순 집합의 개념이라 정렬하려면 별도의 처리가 필요하다. 구현클래스로는 HashSet, TreeSet이 있다.
-   Map :  Key와 Value를 하나의 Entry로 묶어서 데이터를 관리하며, 순서가 없고 키에 대한 중복이 없다. 속도가 빠르다. 구현클래스로는 HashMap, TreeMap이 있다.
-   Queue : Queue는 인터페이스, 구현체는 LinkedList를 사용한다. 가장 먼저 들어온 값이 가장 먼저 빠져나가는 FIFO 방식이다. 
-   Stack : Stack 클래스를 사용한다. 가장 나중에 들어온 값이 가장 먼저 빠져나가는 LIFO 방식이다.

### 정렬

요소들을 특정 기준에 맞춰 내림차순 또는 오름차순으로 배치하는 것이다. Collections의 sort()를 이용하며, 순서를 가지는 Collection들만 정렬 가능하다.

-   Comparable interface의 compareTo(T o)를 활용할 수 있다.
-   객체가 Comparable을 구현하고 있지 않거나 사용자 정의 알고리즘으로 정렬하려는 경우, Comparator를 활용할 수 있다.

```javascript
public class Person {
    String name;
    String id; // 주민등록번호 앞자리

    public Person() {
    }

    public Person(String name, String id) {
        this.name = name;
        this.id = id;
    }
    /*
    자바에서는 equals()의 결과가 true인 두 객체의 해시코드는 같아야 한다.
    equals()를 오버라이딩하려면 hashCode()도 해줘야 한다
    */
    @Override  // 주민번호(id)의 주소값으로 만든 해시코드를 반환
    public int hashCode() {
        return id.hashCode();
    }

    @Override  // 주민번호(id) 문자열이 동일한 사람이면 true 반환
    public boolean equals(Object obj) {
        if (obj instanceof Person) {
            return id.equals(((Person)obj).id);
        }
        return false;
    }
}
```

```javascript
public class SortTest {
    public static void main(String[] args) {
        List<Person> list = new ArrayList<>();

        list.add(new Person("김철수", "910203"));
        list.add(new Person("이영희", "930609"));
        list.add(new Person("박민수", "991111"));

        // 생년월일이 빠른 순으로 정렬하고 싶으므로 사용자정의
        Collections.sort(list, new Comparator<Person>() {

            @Override
            public int compare(Person o1, Person o2) {
                // 리턴 값이 양수 : 자리 바꿈 / 음수 : 자리 유지 / 0 : 동일 위치
                return Integer.parseInt(o2.id) - Integer.parseInt(o1.id);
                // 태어난 년도가 빠른 사람이 앞에 오게 됨
            }
        });
        System.out.println(list);
    }
}
```